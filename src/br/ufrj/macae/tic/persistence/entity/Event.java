package br.ufrj.macae.tic.persistence.entity;
// Generated 26/05/2017 12:44:14 by Hibernate Tools 5.2.1.Final

import java.util.Date;
import java.util.List;

import javax.inject.Inject;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Event generated by hbm2java
 */

@Entity
@Table(name = "event", catalog = "peld")
public class Event implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	
	private long id;
	
	@Inject
	private WaterBody waterBody;
	
	@Inject
	private SizeUnit sizeUnit;
	
	@Inject
	private SamplingProtocol samplingProtocol;
	
	@Inject
	private Subproject subproject; 
	
	private Date eventDate;
	private Date eventTime;
	private Date eventTimeFinal;
	
	private Float sampleSizeValue;
	private String sampleEffort;
	private String eventRemarks;	
	private String locality;
	private String locationRemarks;
	
	private String eventId;
	
	private List<Water> waters;
	private List<Occurrence> occurrences;

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "id", unique = true)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	/*
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "locationId")
	public Location getLocation() {
		return this.location;
	}

	public void setLocation(Location location) {
		this.location = location;
	} */
	
	/*
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "habitatId")
	public Habitat getHabitat() {
		return this.habitat;
	}

	public void setHabitat(Habitat habitat) {
		this.habitat = habitat;
	} */
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "waterBodyId")
	public WaterBody getWaterBody() {
		return this.waterBody;
	}

	public void setWaterBody(WaterBody waterBody) {
		this.waterBody = waterBody;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "sizeUnitId")
	public SizeUnit getSizeUnit() {
		return this.sizeUnit;
	}

	public void setSizeUnit(SizeUnit sizeUnit) {
		this.sizeUnit = sizeUnit;
	}
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "subprojectId")
	public Subproject getSubproject() {
		return this.subproject;
	}

	public void setSubproject(Subproject subproject) {
		this.subproject = subproject;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "samplingProtocolId")
	public SamplingProtocol getSamplingProtocol() {
		return this.samplingProtocol;
	}

	public void setSamplingProtocol(SamplingProtocol samplingProtocol) {
		this.samplingProtocol = samplingProtocol;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "eventDate", nullable = false, length = 10)
	public Date getEventDate() {
		return this.eventDate;
	}

	public void setEventDate(Date eventDate) {
		this.eventDate = eventDate;
	}

	@Temporal(TemporalType.TIME)
	@Column(name = "eventTime", nullable = false, length = 8)
	public Date getEventTime() {
		return this.eventTime;
	}

	public void setEventTime(Date eventTime) {
		this.eventTime = eventTime;
	}
	
	@Temporal(TemporalType.TIME)
	@Column(name = "eventTimeFinal", nullable = false, length = 8)
	public Date getEventTimeFinal() {
		return eventTimeFinal;
	}

	public void setEventTimeFinal(Date eventTimeFinal) {
		this.eventTimeFinal = eventTimeFinal;
	}

	@Column(name = "sampleSizeValue", precision = 12, scale = 0)
	public Float getSampleSizeValue() {
		return this.sampleSizeValue;
	}

	public void setSampleSizeValue(Float sampleSizeValue) {
		this.sampleSizeValue = sampleSizeValue;
	}

	@Column(name = "sampleEffort")
	public String getSampleEffort() {
		return this.sampleEffort;
	}

	public void setSampleEffort(String sampleEffort) {
		this.sampleEffort = sampleEffort;
	}

	@Column(name = "eventRemarks")
	public String getEventRemarks() {
		return this.eventRemarks;
	}

	public void setEventRemarks(String eventRemarks) {
		this.eventRemarks = eventRemarks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "event")
	public List<Water> getWaters() {
		return this.waters;
	}

	public void setWaters(List<Water> waters) {
		this.waters = waters;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "event")
	public List<Occurrence> getOccurrences() {
		return this.occurrences;
	}

	public void setOccurrences(List<Occurrence> occurrences) {
		this.occurrences = occurrences;
	}
	
	@Column(name = "locality")
	public String getLocality() {
		return locality;
	}

	public void setLocality(String locality) {
		this.locality = locality;
	}

	public String getLocationRemarks() {
		return locationRemarks;
	}

	public void setLocationRemarks(String locationRemarks) {
		this.locationRemarks = locationRemarks;
	}

	@Column
	public String getEventId() {
		return eventId;
	}

	public void setEventId(String eventId) {
		this.eventId = eventId;
	}

	
	
}
